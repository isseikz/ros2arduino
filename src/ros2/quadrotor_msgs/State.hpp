// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file State.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _QUADROTOR_MSGS_STATE_HPP_
#define _QUADROTOR_MSGS_STATE_HPP_


#include "../topic.hpp"


namespace quadrotor_msgs {

class State : public ros2::Topic<State>
{
public:
    double x;
    double y;
    double z;
    double vx;
    double vy;
    double vz;
    double ax;
    double ay;
    double az;
    double q0;
    double q1;
    double q2;
    double q3;
    double p;
    double q;
    double r;

  State():
    Topic("quadrotor_msgs::msg::dds_::State_", "State", QUADROTOR_MSGS_STATE_ID),
    x(0), y(0), z(0), vx(0), vy(0), vz(0), ax(0), ay(0), az(0), q0(1), q1(0), q2(0), q3(0), p(0), q(0), r(0)
  {
  }


  bool serialize(void* msg_buf, const State* topic)
  {
    ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
    (void) ucdr_serialize_double(writer, topic->x);
    (void) ucdr_serialize_double(writer, topic->y);
    (void) ucdr_serialize_double(writer, topic->z);
    (void) ucdr_serialize_double(writer, topic->vx);
    (void) ucdr_serialize_double(writer, topic->vy);
    (void) ucdr_serialize_double(writer, topic->vz);
    (void) ucdr_serialize_double(writer, topic->ax);
    (void) ucdr_serialize_double(writer, topic->ay);
    (void) ucdr_serialize_double(writer, topic->az);
    (void) ucdr_serialize_double(writer, topic->q0);
    (void) ucdr_serialize_double(writer, topic->q1);
    (void) ucdr_serialize_double(writer, topic->q2);
    (void) ucdr_serialize_double(writer, topic->q3);
    (void) ucdr_serialize_double(writer, topic->p);
    (void) ucdr_serialize_double(writer, topic->q);
    (void) ucdr_serialize_double(writer, topic->r);

    return !writer->error;
  }

  bool deserialize(void* msg_buf, State* topic)
  {
    ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
    (void) ucdr_deserialize_double(reader, &topic->x);
    (void) ucdr_deserialize_double(reader, &topic->y);
    (void) ucdr_deserialize_double(reader, &topic->z);
    (void) ucdr_deserialize_double(reader, &topic->vx);
    (void) ucdr_deserialize_double(reader, &topic->vy);
    (void) ucdr_deserialize_double(reader, &topic->vz);
    (void) ucdr_deserialize_double(reader, &topic->ax);
    (void) ucdr_deserialize_double(reader, &topic->ay);
    (void) ucdr_deserialize_double(reader, &topic->az);
    (void) ucdr_deserialize_double(reader, &topic->q0);
    (void) ucdr_deserialize_double(reader, &topic->q1);
    (void) ucdr_deserialize_double(reader, &topic->q2);
    (void) ucdr_deserialize_double(reader, &topic->q3);
    (void) ucdr_deserialize_double(reader, &topic->p);
    (void) ucdr_deserialize_double(reader, &topic->q);
    (void) ucdr_deserialize_double(reader, &topic->r);

    return !reader->error;
  }

  uint32_t size_of_topic(const State* topic, uint32_t size)
  {
    (void)(topic);

    uint32_t previousSize = size;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;
    size += ucdr_alignment(size, 8) + 8;

    return size - previousSize;
  }

};

} // namespace quadrotor_msgs


#endif // _QUADROTOR_MSGS_STATE_HPP_
